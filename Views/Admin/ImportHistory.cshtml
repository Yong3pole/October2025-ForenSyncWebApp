@model List<ForenSync_WebApp_New.Models.import_to_main_logs>
@using Microsoft.AspNetCore.Html
@{
    ViewData["Title"] = "Import History";
    Layout = "_Layout";
}

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Import History</h2>
        <div class="text-muted small">
            Last updated: <span id="lastUpdated">@DateTime.Now.ToString("MMM dd, yyyy HH:mm")</span>
            <button class="btn btn-sm btn-outline-secondary ms-2" id="refreshBtn">
                <i class="bi bi-arrow-clockwise"></i> Refresh
            </button>
        </div>
    </div>

    <!-- Enhanced Search and Filter Card -->
    <div class="card mb-4">
        <div class="card-body">
            <form method="get" id="filterForm" class="row g-3">
                <!-- Search Input -->
                <div class="col-md-4">
                    <label class="form-label">Search Imports</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                        <input type="text" name="searchTerm" class="form-control"
                               placeholder="Search by import ID, status, or error message..."
                               value="@Context.Request.Query["searchTerm"].ToString()" />
                    </div>
                </div>

                <!-- Status Filter -->
                <div class="col-md-3">
                    <label class="form-label">Status</label>
                    <select name="status" class="form-select">
                        <option value="">All Statuses</option>
                        <option value="SUCCESS" selected="@(Context.Request.Query["status"] == "SUCCESS")">Success</option>
                        <option value="FAILED" selected="@(Context.Request.Query["status"] == "FAILED")">Failed</option>
                    </select>
                </div>

                <!-- Date Range Filter -->
                <div class="col-md-3">
                    <label class="form-label">Date Range</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-calendar"></i></span>
                        <input type="date" name="startDate" class="form-control"
                               value="@Context.Request.Query["startDate"].ToString()"
                               placeholder="From date" />
                        <span class="input-group-text">to</span>
                        <input type="date" name="endDate" class="form-control"
                               value="@Context.Request.Query["endDate"].ToString()"
                               placeholder="To date" />
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="col-md-2 d-flex align-items-end gap-2">
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="bi bi-funnel"></i> Apply
                    </button>
                    <button type="button" class="btn btn-outline-secondary" onclick="clearFilters()">
                        <i class="bi bi-arrow-clockwise"></i>
                    </button>
                </div>
            </form>

            <!-- Active Filters Display -->
            @if (HasActiveFilters())
            {
                <div class="mt-3 p-3 bg-light rounded">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            Active Filters:
                            @RenderActiveFilters()
                        </div>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="clearFilters()">
                            <i class="bi bi-x-circle"></i> Clear All
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Import History Table -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">Import Logs</h5>
            <div class="text-muted">
                <i class="bi bi-info-circle"></i> Showing @Model.Count import(s)
            </div>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Import ID</th>
                                <th>Timestamp</th>
                                <th>Records Imported</th>
                                <th>Status</th>
                                <th>Case IDs</th>
                                <th>Error Details</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var log in Model)
                            {
                                var totalRecords = (log.case_logs_imported ?? 0) +
                                (log.acquisition_logs_imported ?? 0) +
                                (log.audit_trails_imported ?? 0);

                                <tr>
                                    <td>
                                        <small class="font-monospace">@log.import_id</small>
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(log.import_timestamp))
                                        {
                                            <span class="badge bg-secondary">
                                                @DateTime.Parse(log.import_timestamp).ToString("MM/dd/yyyy HH:mm")
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">N/A</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="small">
                                            <strong>@totalRecords total</strong>
                                            <div class="text-muted">
                                                Cases: @(log.case_logs_imported ?? 0) |
                                                Acquisitions: @(log.acquisition_logs_imported ?? 0) |
                                                Audit: @(log.audit_trails_imported ?? 0)
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        @{
                                            var statusBadgeClass = log.status?.ToUpper() == "SUCCESS" ? "bg-success" :
                                            log.status?.ToUpper() == "FAILED" ? "bg-danger" : "bg-secondary";
                                            var statusText = log.status ?? "Unknown";
                                        }
                                        <span class="badge @statusBadgeClass">@statusText</span>
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(log.imported_case_ids))
                                        {
                                            try
                                            {
                                                // Parse the JSON array string and extract case IDs
                                                var caseIds = System.Text.Json.JsonSerializer.Deserialize<List<string>>(log.imported_case_ids);
                                                if (caseIds != null && caseIds.Any())
                                                {
                                                    var caseIdsDisplay = string.Join(", ", caseIds);
                                                    var caseCount = caseIds.Count;

                                                    <button class="btn btn-sm btn-outline-info"
                                                            data-bs-toggle="popover"
                                                            data-bs-title="Imported Case IDs (@caseCount cases)"
                                                            data-bs-content="@caseIdsDisplay"
                                                            data-bs-html="true"
                                                            data-bs-placement="left">
                                                        <i class="bi bi-list-ul"></i> View Cases (@caseCount)
                                                    </button>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">No cases</span>
                                                }
                                            }
                                            catch
                                            {
                                                <!-- Fallback if JSON parsing fails -->
                                                <button class="btn btn-sm btn-outline-info"
                                                        data-bs-toggle="popover"
                                                        data-bs-title="Imported Case IDs"
                                                        data-bs-content="@log.imported_case_ids"
                                                        data-bs-placement="left">
                                                    <i class="bi bi-list-ul"></i> View Cases
                                                </button>
                                            }
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(log.error_message))
                                        {
                                            <button class="btn btn-sm btn-outline-danger"
                                                    data-bs-toggle="tooltip"
                                                    title="@log.error_message">
                                                <i class="bi bi-exclamation-triangle"></i> Error
                                            </button>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Summary Statistics -->
                <div class="row mt-4">
                    @{
                        var totalRecordsAll = Model.Sum(m => (m.case_logs_imported ?? 0) +
                        (m.acquisition_logs_imported ?? 0) +
                        (m.audit_trails_imported ?? 0));
                        var successCount = Model.Count(m => m.status?.ToUpper() == "SUCCESS");
                        var failedCount = Model.Count(m => m.status?.ToUpper() == "FAILED");
                    }
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-primary">@Model.Count</h5>
                                <p class="card-text">Total Imports</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-success">@successCount</h5>
                                <p class="card-text">Successful</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-danger">@failedCount</h5>
                                <p class="card-text">Failed</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-info">@totalRecordsAll</h5>
                                <p class="card-text">Total Records</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-warning text-center">
                    <i class="bi bi-exclamation-triangle"></i>
                    @if (HasActiveFilters())
                    {
                        <text>No import logs found matching your filters. <a href="javascript:void(0)" onclick="clearFilters()">Clear filters</a> to see all imports.</text>
                    }
                    else
                    {
                        <text>No import logs found. Import operations will appear here.</text>
                    }
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Initialize popovers
            const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
            const popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
                return new bootstrap.Popover(popoverTriggerEl);
            });

            // Refresh functionality
            document.getElementById('refreshBtn').addEventListener('click', function() {
                window.location.reload();
            });

            // Set today as max date for date inputs
            const today = new Date().toISOString().split('T')[0];
            document.querySelectorAll('input[type="date"]').forEach(input => {
                input.setAttribute('max', today);
            });
        });

        function clearFilters() {
            // Clear all form inputs
            document.getElementById('filterForm').reset();
            // Submit the form to reload without filters
            window.location.href = window.location.pathname;
        }

        // Real-time search debounce
        let searchTimeout;
        const searchInput = document.querySelector('input[name="searchTerm"]');
        if (searchInput) {
            searchInput.addEventListener('input', function(e) {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    document.getElementById('filterForm').submit();
                }, 500);
            });
        }

        // View Cases script
                // Initialize popovers with better configuration
        const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
        const popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
            return new bootstrap.Popover(popoverTriggerEl, {
                container: 'body',
                trigger: 'click',
                html: true
            });
        });

        // Close popovers when clicking outside
        document.addEventListener('click', function(e) {
            popoverList.forEach(function(popover) {
                if (!popover._element.contains(e.target)) {
                    popover.hide();
                }
            });
        });
    </script>

    <style>
        .table th {
            font-weight: 600;
            background-color: #343a40;
            color: white;
        }

        .table-hover tbody tr:hover {
            background-color: rgba(0, 123, 255, 0.1);
            cursor: pointer;
        }

        .badge {
            font-size: 0.75em;
        }

        .font-monospace {
            font-family: 'Courier New', monospace;
            font-size: 0.85em;
        }

        .filter-badge {
            font-size: 0.8em;
            margin-right: 0.5rem;
        }

        .card .card {
            box-shadow: none;
            border: 1px solid #dee2e6;
        }
    </style>
}

@functions {
    private bool HasActiveFilters()
    {
        return !string.IsNullOrEmpty(Context.Request.Query["searchTerm"].ToString()) ||
               !string.IsNullOrEmpty(Context.Request.Query["status"].ToString()) ||
               !string.IsNullOrEmpty(Context.Request.Query["startDate"].ToString()) ||
               !string.IsNullOrEmpty(Context.Request.Query["endDate"].ToString());
    }

    private Microsoft.AspNetCore.Html.IHtmlContent RenderActiveFilters()
    {
        var filters = new List<string>();

        var searchTerm = Context.Request.Query["searchTerm"].ToString();
        var status = Context.Request.Query["status"].ToString();
        var startDate = Context.Request.Query["startDate"].ToString();
        var endDate = Context.Request.Query["endDate"].ToString();

        if (!string.IsNullOrEmpty(searchTerm))
        {
            filters.Add($"Search: \"{searchTerm}\"");
        }

        if (!string.IsNullOrEmpty(status))
        {
            filters.Add($"Status: {status}");
        }

        if (!string.IsNullOrEmpty(startDate))
        {
            var endDateDisplay = !string.IsNullOrEmpty(endDate) ? endDate : "Present";
            filters.Add($"Date: {startDate} to {endDateDisplay}");
        }

        var htmlContent = string.Join(" • ", filters.Select(f =>
            $"<span class='badge filter-badge bg-primary'>{f}</span>"));

        return new HtmlString(htmlContent);
    }
}