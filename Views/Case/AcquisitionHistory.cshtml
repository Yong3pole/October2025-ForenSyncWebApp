@model IEnumerable<ForenSync_WebApp_New.Models.AcquisitionLogViewModel>
@using Microsoft.AspNetCore.Html
@{
    ViewData["Title"] = "Acquisition History";
}

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Acquisition History</h2>
        <!-- <button type="button" class="btn btn-success">
            <i class="bi bi-plus-circle"></i> New Acquisition
        </button>
        -->
    </div>

    <!-- Enhanced Search and Filter Card -->
    <div class="card mb-4">
        <div class="card-body">
            <form method="get" id="filterForm" class="row g-3">
                <!-- Search Input -->
                <div class="col-md-4">
                    <label class="form-label">Search Acquisitions</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                        <input type="text" name="searchTerm" class="form-control"
                               placeholder="Search by case ID, acquisition ID, tool..."
                               value="@Context.Request.Query["searchTerm"].ToString()" />
                    </div>
                </div>

                <!-- Acquisition Type Filter -->
                <div class="col-md-3">
                    <label class="form-label">Acquisition Type</label>
                    <select name="filterType" class="form-select">
                        <option value="">All Types</option>
                        <option value="memory capture">Memory Capture</option>
                        <option value="drive">Drive</option>
                        <option value="snapshot">Snapshot</option>
                    </select>
                </div>

                <!-- Date Range Filter -->
                <div class="col-md-3">
                    <label class="form-label">Date Range</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-calendar"></i></span>
                        <input type="date" name="startDate" class="form-control"
                               value="@Context.Request.Query["startDate"].ToString()"
                               placeholder="From date" />
                        <span class="input-group-text">to</span>
                        <input type="date" name="endDate" class="form-control"
                               value="@Context.Request.Query["endDate"].ToString()"
                               placeholder="To date" />
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="col-md-2 d-flex align-items-end gap-2">
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="bi bi-funnel"></i> Apply
                    </button>
                    <button type="button" class="btn btn-outline-secondary" onclick="clearFilters()">
                        <i class="bi bi-arrow-clockwise"></i>
                    </button>
                </div>
            </form>

            <!-- Active Filters Display -->
            @if (HasActiveFilters())
            {
                <div class="mt-3 p-3 bg-light rounded">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <strong>Active Filters:</strong>
                            @RenderActiveFilters()
                        </div>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="clearFilters()">
                            <i class="bi bi-x-circle"></i> Clear All
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Acquisition Logs Table -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">Acquisition Logs</h5>
            <div class="text-muted">
                <i class="bi bi-info-circle"></i> Showing @Model.Count() acquisition(s)
            </div>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Type</th>
                                <th>Case ID</th>
                                <th>Tool</th>
                                <th>Created At</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var log in Model)
                            {
                                <tr>
                                    <td>
                                        <span class="badge
                               @(log.Type?.ToLower() == "memory capture" ? "bg-danger" :
                                                                       log.Type?.ToLower() == "drive" ? "bg-success" :
                                                                       log.Type?.ToLower() == "snapshot" ? "bg-warning" : "bg-secondary")">
                                    @log.Type
                                </span>
                            </td>
                            <td>
                                <span class="badge bg-primary">@log.CaseId</span>
                            </td>

                                    <td>@log.Tool</td>
                                    <td>
                                        <span class="badge bg-light text-dark">
                                            @log.CreatedAt
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <!-- Only show file opening button for snapshot type -->
                                    @if (log.Type?.ToLower() == "snapshot" && !string.IsNullOrEmpty(log.OutputPath))
                                            {
                                                var cleanPath = log.OutputPath.StartsWith("Case/") ? log.OutputPath.Substring(5) : log.OutputPath;
                                                <button class="btn btn-outline-primary open-acquisition-file-btn"
                                                        data-file-path="/@cleanPath"
                                                        data-acquisition-id="@log.AcquisitionId"
                                                        title="Open Output File">
                                                    <i class="bi bi-file-text"></i>
                                                </button>
                                            }
                                            else if (log.Type?.ToLower() == "snapshot" && string.IsNullOrEmpty(log.OutputPath))
                                            {
                                                <button class="btn btn-outline-secondary" title="No output file available" disabled>
                                                    <i class="bi bi-file-x"></i>
                                                </button>
                                            }

                                            <!-- View Details Button - Always show this -->
                                            <button class="btn btn-outline-info" title="View Details" onclick="showAcquisitionDetails('@log.AcquisitionId')">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-warning text-center">
                    <i class="bi bi-exclamation-triangle"></i>
                    @if (HasActiveFilters())
                    {
                        <text>No acquisitions found matching your filters. <a href="javascript:void(0)" onclick="clearFilters()">Clear filters</a> to see all acquisitions.</text>
                    }
                    else
                    {
                        <text>No acquisition logs found. Import data from your toolkit to get started.</text>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Acquisition Details Modal -->
<div class="modal fade" id="acquisitionDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Acquisition Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="acquisitionDetailsContent">
                <!-- Content will be populated by JavaScript -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Set the selected filter type
            const filterType = '@Context.Request.Query["filterType"].ToString()';
            if (filterType) {
                document.querySelector('select[name="filterType"]').value = filterType;
            }

            // Set today as max date for date inputs
            const today = new Date().toISOString().split('T')[0];
            document.querySelectorAll('input[type="date"]').forEach(input => {
                input.setAttribute('max', today);
            });

            // Row selection
            const rows = document.querySelectorAll('tbody tr');
            rows.forEach(row => {
                row.addEventListener('click', function() {
                    rows.forEach(r => r.classList.remove('table-active'));
                    this.classList.add('table-active');
                });
            });

            // Initialize tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[title]'));
            const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Add click handler for acquisition file buttons
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('open-acquisition-file-btn') ||
                    e.target.closest('.open-acquisition-file-btn')) {

                    const button = e.target.classList.contains('open-acquisition-file-btn')
                        ? e.target
                        : e.target.closest('.open-acquisition-file-btn');

                    const filePath = button.getAttribute('data-file-path');
                    const acquisitionId = button.getAttribute('data-acquisition-id');
                    openAcquisitionFile(filePath, acquisitionId, button);
                }
            });
        });

        // Function to open acquisition file
        function openAcquisitionFile(filePath, acquisitionId, button) {
            const originalHTML = button.innerHTML;

            // Show loading state
            button.disabled = true;
            button.innerHTML = '<span class="spinner-border spinner-border-sm"></span>';

            // Check if file exists
            fetch(filePath)
                .then(response => {
                    if (response.ok) {
                        // File exists - open it in new tab
                        window.open(filePath, '_blank');
                    } else {
                        // File doesn't exist - show error message
                        showFileError(acquisitionId, filePath);
                    }
                })
                .catch(error => {
                    console.error('Error checking file:', error);
                    showFileError(acquisitionId, filePath);
                })
                .finally(() => {
                    // Reset button
                    setTimeout(() => {
                        button.disabled = false;
                        button.innerHTML = '<i class="bi bi-file-text"></i>';
                    }, 1000);
                });
        }

        // Show error message when file not found
        function showFileError(acquisitionId, filePath) {
            const alert = document.createElement('div');
            alert.className = 'alert alert-warning alert-dismissible fade show mt-3';
            alert.innerHTML = `
                <i class="bi bi-exclamation-triangle me-2"></i>
                <strong>Output file not found for acquisition: ${acquisitionId}</strong><br>
                File path: ${filePath}<br>
                The output file may not have been IMPORTED, please import the Case folder.
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;

            // Insert at the top of the page
            const container = document.querySelector('.container-fluid');
            container.insertBefore(alert, container.firstChild);

            // Auto-remove after 8 seconds
            setTimeout(() => {
                if (alert.parentNode) {
                    alert.remove();
                }
            }, 8000);
        }

        function clearFilters() {
            document.getElementById('filterForm').reset();
            window.location.href = window.location.pathname;
        }

        // Real-time search debounce
        let searchTimeout;
        const searchInput = document.querySelector('input[name="searchTerm"]');
        if (searchInput) {
            searchInput.addEventListener('input', function(e) {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    document.getElementById('filterForm').submit();
                }, 500);
            });
        }

        function showAcquisitionDetails(acquisitionId) {
            const detailsHtml = `
                <div class="text-center">
                    <h6>Acquisition Details</h6>
                    <p>Details for acquisition <strong>${acquisitionId}</strong> would be displayed here.</p>
                    <p class="text-muted">This feature can be extended to show full acquisition metadata.</p>
                </div>
            `;
            document.getElementById('acquisitionDetailsContent').innerHTML = detailsHtml;
            new bootstrap.Modal(document.getElementById('acquisitionDetailsModal')).show();
        }
    </script>

    <style>
        .table th {
            font-weight: 600;
            background-color: #343a40;
            color: white;
        }

        .table-hover tbody tr:hover {
            background-color: rgba(0, 123, 255, 0.1);
            cursor: pointer;
        }

        .table-active {
            background-color: rgba(0, 123, 255, 0.2) !important;
        }

        .badge {
            font-size: 0.75em;
        }

        .text-truncate {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .filter-badge {
            font-size: 0.8em;
            margin-right: 0.5rem;
        }

        .btn-group-sm > .btn {
            padding: 0.25rem 0.5rem;
        }
    </style>
}
@functions {
    private bool HasActiveFilters()
    {
        return !string.IsNullOrEmpty(Context.Request.Query["searchTerm"].ToString()) ||
               !string.IsNullOrEmpty(Context.Request.Query["filterType"].ToString()) ||
               !string.IsNullOrEmpty(Context.Request.Query["startDate"].ToString()) ||
               !string.IsNullOrEmpty(Context.Request.Query["endDate"].ToString());
    }

    private Microsoft.AspNetCore.Html.IHtmlContent RenderActiveFilters()
    {
        var filters = new List<string>();

        var searchTerm = Context.Request.Query["searchTerm"].ToString();
        var filterType = Context.Request.Query["filterType"].ToString();
        var startDate = Context.Request.Query["startDate"].ToString();
        var endDate = Context.Request.Query["endDate"].ToString();

        if (!string.IsNullOrEmpty(searchTerm))
        {
            filters.Add($"Search: \"{searchTerm}\"");
        }

        if (!string.IsNullOrEmpty(filterType))
        {
            filters.Add($"Type: {filterType}");
        }

        if (!string.IsNullOrEmpty(startDate))
        {
            var endDateDisplay = !string.IsNullOrEmpty(endDate) ? endDate : "Present";
            filters.Add($"Date: {startDate} to {endDateDisplay}");
        }

        var htmlContent = string.Join(" • ", filters.Select(f =>
            $"<span class='badge filter-badge bg-primary'>{f}</span>"));

        return new HtmlString(htmlContent);
    }
}