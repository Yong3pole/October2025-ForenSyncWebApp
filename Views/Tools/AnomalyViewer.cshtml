@{
    ViewData["Title"] = "Anomaly Viewer";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h2 class="mb-4">
                <i class="bi bi-exclamation-triangle me-2"></i>@ViewData["Title"]
            </h2>

            <!-- File Selection Card -->
            <div class="card mb-4">
                <div class="card-header bg-warning text-dark">
                    <h5 class="mb-0">
                        <i class="bi bi-search me-2"></i>Select MFT CSV for Analysis
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label for="csvFile" class="form-label">Choose MFT CSV File</label>
                                <input class="form-control" type="file" id="csvFile" accept=".csv">
                                <div class="form-text">
                                    Select a MFTECmd-generated CSV file for AI anomaly analysis
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 d-flex align-items-end">
                            <button class="btn btn-warning w-100" id="analyzeBtn" disabled>
                                <i class="bi bi-robot me-2"></i>Analyze MFT
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Analysis Results Section -->
            <div id="analysisResults" style="display: none;">
                <!-- Summary Card -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">
                            <i class="bi bi-graph-up me-2"></i>Analysis Summary
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row" id="summaryContent">
                            <!-- Summary will be populated by JavaScript -->
                        </div>
                    </div>
                </div>

                <!-- AI Insights Card -->
                <div class="card mb-4">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0">
                            <i class="bi bi-robot me-2"></i>AI Analysis Insights
                        </h5>
                    </div>
                    <div class="card-body">
                        <div id="aiInsightsContent">
                            <!-- AI insights will be populated by JavaScript -->
                        </div>
                    </div>
                </div>

                <!-- Detailed Results Card -->
                <div class="card mb-4">
                    <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="bi bi-list-check me-2"></i>Detailed Analysis Results
                        </h5>
                        <button class="btn btn-sm btn-light" id="saveTextBtn">
                            <i class="bi bi-file-text me-1"></i>Save Report
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Metric</th>
                                        <th>Value</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody id="detailedResults">
                                    <!-- Detailed results will be populated by JavaScript -->
                                </tbody>
                            </table>
                        </div>

                        <!-- Suspicious Files Section -->
                        <div class="mt-4">
                            <h6><i class="bi bi-flag me-2"></i>Top Suspicious Files</h6>
                            <div id="suspiciousFiles" class="mt-2">
                                <!-- Suspicious files will be populated by JavaScript -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Raw JSON Data (Collapsible) -->
                <div class="card">
                    <div class="card-header bg-secondary text-white">
                        <h6 class="mb-0">
                            <a class="text-white text-decoration-none" data-bs-toggle="collapse" href="#rawDataCollapse">
                                <i class="bi bi-code-slash me-2"></i>Raw Analysis Data
                            </a>
                        </h6>
                    </div>
                    <div id="rawDataCollapse" class="collapse">
                        <div class="card-body">
                            <pre id="responseContent" class="mb-0"></pre>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const csvFileInput = document.getElementById('csvFile');
            const analyzeBtn = document.getElementById('analyzeBtn');
            const analysisResults = document.getElementById('analysisResults');
            const responseContent = document.getElementById('responseContent');
            let currentAnalysisResult = null;

            // Enable analyze button when file is selected
            csvFileInput.addEventListener('change', function() {
                analyzeBtn.disabled = !this.files.length;
                if (this.files.length) {
                    const fileName = this.files[0].name;
                    analyzeBtn.innerHTML = `<i class="bi bi-robot me-2"></i>Analyze: ${fileName}`;
                } else {
                    analyzeBtn.innerHTML = `<i class="bi bi-robot me-2"></i>Analyze MFT`;
                }
            });

            // Analyze button click handler
            analyzeBtn.addEventListener('click', async function() {
                if (!csvFileInput.files.length) return;

                const file = csvFileInput.files[0];

                // Show loading state
                analyzeBtn.disabled = true;
                analyzeBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Analyzing...';

                try {
                    const formData = new FormData();
                    formData.append('csvFile', file);

                    const response = await fetch('@Url.Action("AnalyzeMFT", "Tools")', {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();
                    currentAnalysisResult = result;

                    // Display organized results
                    displayOrganizedResults(result);

                    // Show the results section
                    analysisResults.style.display = 'block';

                } catch (error) {
                    console.error('Analysis failed:', error);
                    alert('Analysis failed: ' + error.message);
                } finally {
                    // Reset button
                    analyzeBtn.disabled = false;
                    analyzeBtn.innerHTML = '<i class="bi bi-robot me-2"></i>Analyze MFT';
                }
            });

            // Display organized results
            function displayOrganizedResults(result) {
                // Update summary section
                displaySummary(result);

                // Update AI insights
                displayAIInsights(result);

                // Update detailed results
                displayDetailedResults(result);

                // Update suspicious files
                displaySuspiciousFiles(result);

                // Keep raw data for reference
                responseContent.textContent = JSON.stringify(result, null, 2);
            }

            // Display summary section
            function displaySummary(result) {
                const score = result.analysis.score;
                const alertLevel = result.analysis.alert_level;
                const alertColor = result.analysis.alert_color;

                let badgeClass = 'bg-success';
                if (alertColor === 'orange') badgeClass = 'bg-warning';
                if (alertColor === 'red') badgeClass = 'bg-danger';

                document.getElementById('summaryContent').innerHTML = `
                    <div class="col-md-3 text-center">
                        <div class="card bg-light">
                            <div class="card-body">
                                <h3 class="card-title ${alertColor === 'red' ? 'text-danger' : alertColor === 'orange' ? 'text-warning' : 'text-success'}">
                                    ${score}/100
                                </h3>
                                <p class="card-text">Risk Score</p>
                                <span class="badge ${badgeClass}">${alertLevel} Risk</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 text-center">
                        <div class="card bg-light">
                            <div class="card-body">
                                <h3 class="card-title text-primary">${result.analysis.metrics.total_files.toLocaleString()}</h3>
                                <p class="card-text">Total Files</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 text-center">
                        <div class="card bg-light">
                            <div class="card-body">
                                <h3 class="card-title text-warning">${result.analysis.metrics.large_timestamp_discrepancies}</h3>
                                <p class="card-text">Timestamp Anomalies</p>
                                <small class="text-muted">${result.analysis.metrics.large_timestamp_percentage}% of files</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 text-center">
                        <div class="card bg-light">
                            <div class="card-body">
                                <h3 class="card-title text-info">${result.analysis.metrics.rapid_deletions}</h3>
                                <p class="card-text">Rapid Deletions</p>
                                <small class="text-muted">${result.analysis.metrics.rapid_deletion_percentage}% of files</small>
                            </div>
                        </div>
                    </div>
                `;
            }

            // Display AI insights
            function displayAIInsights(result) {
                document.getElementById('aiInsightsContent').innerHTML = `
                    <div class="alert alert-info">
                        <p class="mb-0">${result.ai_insights}</p>
                    </div>
                `;
            }

            // Display detailed results
            function displayDetailedResults(result) {
                const analysis = result.analysis;
                document.getElementById('detailedResults').innerHTML = `
                    <tr>
                        <td><strong>Case ID</strong></td>
                        <td>${result.case_id}</td>
                        <td><span class="badge bg-secondary">Case</span></td>
                    </tr>
                    <tr>
                        <td><strong>Report ID</strong></td>
                        <td>${result.report_id}</td>
                        <td><span class="badge bg-primary">Reference</span></td>
                    </tr>
                    <tr>
                        <td><strong>Analysis Date</strong></td>
                        <td>${result.date_created}</td>
                        <td><span class="badge bg-info">Timestamp</span></td>
                    </tr>
                    <tr>
                        <td><strong>File Name</strong></td>
                        <td>${result.file_name}</td>
                        <td><span class="badge bg-dark">Evidence</span></td>
                    </tr>
                    <tr>
                        <td><strong>File Size</strong></td>
                        <td>${(result.file_size / 1024 / 1024).toFixed(2)} MB</td>
                        <td><span class="badge bg-dark">Size</span></td>
                    </tr>
                    <tr>
                        <td><strong>Risk Level</strong></td>
                        <td>${analysis.alert_level}</td>
                        <td><span class="badge ${analysis.alert_color === 'red' ? 'bg-danger' : analysis.alert_color === 'orange' ? 'bg-warning' : 'bg-success'}">${analysis.alert_level}</span></td>
                    </tr>
                    <tr>
                        <td><strong>Risk Score</strong></td>
                        <td>${analysis.score}/100</td>
                        <td><span class="badge ${analysis.score >= 70 ? 'bg-danger' : analysis.score >= 40 ? 'bg-warning' : 'bg-success'}">${analysis.score}</span></td>
                    </tr>
                `;
            }

            // Display suspicious files
            function displaySuspiciousFiles(result) {
                const suspiciousFiles = result.analysis.top_suspicious_files;
                let filesHTML = '';

                if (suspiciousFiles && Array.isArray(suspiciousFiles)) {
                    suspiciousFiles.forEach((file, index) => {
                        const fileName = file.file_name || 'Unknown';
                        const yearsDelta = file.years_delta || 0;
                        filesHTML += `
                            <div class="alert alert-warning d-flex justify-content-between align-items-center">
                                <div>
                                    <strong>${index + 1}.</strong> ${fileName}
                                </div>
                                <span class="badge bg-danger">${yearsDelta} years delta</span>
                            </div>
                        `;
                    });
                } else {
                    filesHTML = '<div class="alert alert-secondary">No suspicious files detected</div>';
                }

                document.getElementById('suspiciousFiles').innerHTML = filesHTML;
            }

            // Save as Text function with file dialog
            async function saveAsTextWithDialog() {
                if (!currentAnalysisResult) return;

                const btn = document.getElementById('saveTextBtn');
                const originalHTML = btn.innerHTML;
                btn.disabled = true;
                btn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>Saving...';

                try {
                    const response = await fetch('@Url.Action("DownloadTextReport", "Tools")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(currentAnalysisResult)
                    });

                    if (response.ok) {
                        const blob = await response.blob();
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.style.display = 'none';
                        a.href = url;
                        a.download = `MFT_Report_${currentAnalysisResult.report_id}.txt`;
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);

                        // Show success message
                        showSaveSuccess(a.download);
                    } else {
                        alert('Failed to generate report. Please try again.');
                    }
                } catch (error) {
                    console.error('Save failed:', error);
                    alert('Save failed: ' + error.message);
                } finally {
                    btn.disabled = false;
                    btn.innerHTML = originalHTML;
                }
            }

            // Show save success message - FIXED VERSION
            function showSaveSuccess(fileName) {
                const successAlert = document.createElement('div');
                successAlert.className = 'alert alert-success alert-dismissible fade show mt-3';
                successAlert.innerHTML = `
                    <i class="bi bi-check-circle me-2"></i>
                    <strong>Success!</strong> Report "${fileName}" is downloading. Choose where to save it.
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;

                // Insert at the top of the analysis results section
                const analysisResults = document.getElementById('analysisResults');
                analysisResults.insertBefore(successAlert, analysisResults.firstChild);

                // Auto-remove after 5 seconds
                setTimeout(() => {
                    if (successAlert.parentNode) {
                        successAlert.remove();
                    }
                }, 5000);
            }

            // Delegate the save button click event - MORE RELIABLE
            document.addEventListener('click', function(e) {
                // Check if the clicked element or its parent is the save button
                const saveBtn = e.target.closest('#saveTextBtn');
                if (saveBtn) {
                    saveAsTextWithDialog();
                }
            });
        });
    </script>

    <style>
        pre {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            padding: 1rem;
            font-size: 0.875rem;
            max-height: 300px;
            overflow-y: auto;
        }

        .card {
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            border: 1px solid rgba(0, 0, 0, 0.125);
        }

        .card-header {
            border-bottom: 1px solid rgba(0, 0, 0, 0.125);
        }
    </style>
}